// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/notification-service/internal/model"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// GetCountNotification mocks base method.
func (m *MockDbRepo) GetCountNotification(ctx context.Context, userUuid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountNotification", ctx, userUuid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountNotification indicates an expected call of GetCountNotification.
func (mr *MockDbRepoMockRecorder) GetCountNotification(ctx, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountNotification", reflect.TypeOf((*MockDbRepo)(nil).GetCountNotification), ctx, userUuid)
}

// GetNotifications mocks base method.
func (m *MockDbRepo) GetNotifications(ctx context.Context, userUuid string, limit, offset int64) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, userUuid, limit, offset)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockDbRepoMockRecorder) GetNotifications(ctx, userUuid, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockDbRepo)(nil).GetNotifications), ctx, userUuid, limit, offset)
}

// MarkNotificationsAsRead mocks base method.
func (m *MockDbRepo) MarkNotificationsAsRead(ctx context.Context, userUuid string, notificationId []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationsAsRead", ctx, userUuid, notificationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNotificationsAsRead indicates an expected call of MarkNotificationsAsRead.
func (mr *MockDbRepoMockRecorder) MarkNotificationsAsRead(ctx, userUuid, notificationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationsAsRead", reflect.TypeOf((*MockDbRepo)(nil).MarkNotificationsAsRead), ctx, userUuid, notificationId)
}
